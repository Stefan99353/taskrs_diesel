openapi: "3.0.0"
info:
  title: taskrs API
  description: OpenAPI 3 specification for the taskrs API
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http:localhost:8080/api/v1
    description: Local development server

tags:
  - name: auth
    description: Auth related endpoints
  - name: permissions
    description: Permission related endpoints
  - name: users
    description: User related endpoints

paths:
  /auth/login:
    post:
      summary: Login
      tags:
        - auth
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUser'
      responses:
        200:
          description: Login successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokensDto'
        400:
          description: Login failed (Email/Password wrong or user is deactivated)
        500:
          description: Some kind of server error occured. See server logs for more information
  /auth/logout:
    post:
      summary: Logout
      tags:
        - auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successfull
        500:
          description: Some kind of server error occured. See server logs for more information
  /auth/token:
    post:
      summary: Refresh token using the refresh token provided by `/auth/login`
      tags:
        - auth
      requestBody:
        description: Refresh token
        required: true
        content:
          text/plain:
            example: <refresh_token>
      responses:
        200:
          description: Refresh successfull
          content:
            text/plain:
              example: <access_token>
        403:
          description: Refresh failed (Invalid token, User does not exist)
        500:
          description: Some kind of server error occured. See server logs for more information
  /auth/token/revoke:
    delete:
      summary: Revoke a refresh token of a user
      description: Needs permission `auth_revoke_refresh_token` for access
      tags:
        - auth
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Refresh token
        required: true
        content:
          text/plain:
            example: <refresh_token>
      responses:
        200:
          description: Revoke successfull
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information

  /permissions:
    get:
      summary: Returns a list of permissions
      description: Needs permission `permission_get_all` for access
      tags:
        - permissions
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: A JSON array of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information
    post:
      summary: Grants permissions to a user
      description: Needs permission `permission_grant` for access
      tags:
        - permissions
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Permissions to be granted
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPermissionsDto'
      responses:
        200:
          description: All permissions granted or were already granted
        400:
          description: User for whom to grant permissions, does not exist
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information
    delete:
      summary: Revokes permissions to a user
      description: Needs permission `permission_revoke` for access
      tags:
        - permissions
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Permissions to be revoked
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPermissionsDto'
      responses:
        200:
          description: All permissions revoked or were already revoked
        400:
          description: User for whom to revoke permissions, does not exist
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information
  /permissions/set:
    post:
      summary: Sets permissions of a user
      description: Needs permission `permission_set` for access
      tags:
        - permissions
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Permissions of user
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPermissionsDto'
      responses:
        200:
          description: All permissions set
        400:
          description: User for whom to set permissions, does not exist
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information

  /users:
    get:
      summary: Returns a list of users
      description: Needs permission `user_get_all` for access
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        200:
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information
    post:
      summary: Create a new user
      description: Needs permission `user_create`
      tags:
        - users
      requestBody:
        description: New user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User email does already exist
        403:
          description: User does not have necessary permission/s
          content:
            text/plain:
              example: Permission/s that is/are missing
        500:
          description: Some kind of server error occured. See server logs for more information

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        group:
          type: string
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
    SimpleUser:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        activated:
          type: boolean
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
    UserPermissionsDto:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        permissionIds:
          type: array
          items:
            type: integer
            format: int32
    UserTokensDto:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string